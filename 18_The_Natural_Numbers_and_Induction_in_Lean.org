#+Title: Logic and Proof
#+Author: [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]], [[http://www.andrew.cmu.edu/user/rlewis1/][Robert Y. Lewis]],  [[http://www.contrib.andrew.cmu.edu/~fpv/][Floris van Doorn]]

* The Natural Numbers and Induction in Lean
:PROPERTIES:
  :CUSTOM_ID: The_Natural_Numbers_and_Induction_in_Lean
:END:      

The goal of this chapter is to give a more axiomatic, foundational
account of the natural numbers and its basic operations. First, we
will do this informally, showing how operations like addition and
multiplication can be defined using the principle of recursion, and
showing how some of their basic properties can be proved using
induction. Then we will see how this plays out in the Lean theorem
prover, using Lean's built-in mechanisms for induction and recursion.

** Defining the Arithmetic Operations Axiomatically
:PROPERTIES:
  :CUSTOM_ID: Defining_the_Arithmetic_Operations_Axiomatically
:END:

Let $\NN$ be the set of natural numbers with least element $0$, and
let $\suc(m) = m + 1$ be the successor function. The structure $( \NN,
0, \suc )$ satisfies the following clauses:
- $0 \neq \suc(m)$ for any $m$ in $\NN$.
- For every $m$ and $n$ in $\NN$, if $m \neq n$, then $\suc(m) \neq
  \suc(n)$. In other words, $\suc$ is /injective/.
- If $A$ is any subset of $\NN$ with the property that $0$ is in $A$
  and whenever $n$ is in $A$ then $\suc(n)$ is in $A$, then $A = \NN$.
The last clause can be reformulated as the principle of induction:
#+BEGIN_QUOTE
Suppose $P(n)$ is any property of natural numbers, such that $P$ holds
of $0$, and for every $n$, $P(n)$ implies $P(\suc(n))$. Then every $P$
holds of every natural number.
#+END_QUOTE
Remember that this principle can be used to justify the principle of
definition by recursion:
#+BEGIN_QUOTE 
Let $A$ be any set, $a$ be any element of $A$, and let $g(n,m)$ be any
function from $\NN \times A$ to $A$. Then there is a unique function
$f: \NN \to A$ satisfying the following two clauses:
- $f(0) = a$
- $f(\suc(n)) = g(n,f(n))$ for every $n$ in $N$.
#+END_QUOTE

We can use the principle of recursive definition to define addition
with the following two clauses:
\begin{align*}
m + 0 & = m \\
m + \suc(n) & = \suc(m + n)
\end{align*}
Note that we are fixing $m$, and viewing this as a function of $n$.
If we write $1 = \suc(0)$, $2 = \suc(1)$, and so on, it is easy to
prove $n + 1 = \suc(n)$ from the definition of addition.

We can proceed to define multiplication using the following two
clauses:
\begin{align*}
m \cdot 0 & = 0 \\
m \cdot \suc(n) & = m \cdot n + m
\end{align*}
We can also define a predecessor function by
\begin{align*}
\fn{pred}(0) & = 0 \\
\fn{pred}(\suc(n)) & = n,
\end{align*}
and ``truncated subtraction'' by
\begin{align*}
m \tsub 0 & = 0 \\
m \tsub (\suc(n)) & = \fn{pred}(m \tsub n).
\end{align*}

With these definitions and the induction principle, one can prove all
the following identities:
- $n \neq 0$ implies $\suc(\fn{pred}(n)) = n$
- $0 + n = n$
- $\suc(m) + n = \suc(m + n)$
- $(m + n) + k = m + (n + k)$
- $m + n = n + m$
- $m(n + k) = mn + mk$
- $0 \cdot n = 0$
- $1 \cdot n = x$
- $(mn)k = m(nk)$
- $mn = nm$
We will do the first five here, and leave the remaining ones as
exercises.

#+HTML: <hr>
#+LATEX: \horizontalrule

*Proposition.* For every natural number $n$, if $n \neq 0$ then
$\suc(\fn{pred}(n)) = n$.

*Proof.* By induction on $n$. We have ruled out the case where $n$ is
$0$, so we only need to show that the claim holds for $\suc(n)$. But
in that case, we have $\suc(\fn{pred}(\suc(n)) = \suc(n)$ by the
second defining clause of the predecessor function.

*Proposition.* For every $n$, $0 + n = n$. 

*Proof.* By induction on $n$. We have $0 + 0 = 0$ by the first
defining clause for addition. And assuming $0 + n = n$, we have
$0 + \suc(n) = \suc(0 + n) = n$, using the second defining clause for
addition.

*Proposition.* For every $m$ and $n$, $\suc(m) + n = \suc(m + n)$.

*Proof.* Fix $m$ and use induction on $n$. Then $n = 0$, we have
$\suc(m) + 0 = \suc(m) = \suc(m + 0)$, using the first defining clause
for addition. Assuming the claim holds for $n$, we have
\begin{align*}
\suc(m) + \suc(n) & = \suc(\suc(m) + n) \\
& = \suc (\suc (m + n)) \\
& = \suc (m + \suc(n)),
\end{align*}
using the inductive hypothesis and the second defining clause for
addition.

*Proposition.* For every $m$, $n$, and $k$, $(m + n) + k = m + (n +
k)$.

*Proof.* By induction on $k$. The case where $k = 0$ is easy, and in
the induction step we have
\begin{align*}
(m + n) + \suc(k) & = \suc ((m + n) + k) \\
& = \suc (m + (n + k)) \\
& = m + \suc (n + k) \\
& = m + (n + \suc (k)))
\end{align*}
using the inductive hypothesis and the definition of addition.

*Proposition.* For every pair of natural numbers $m$ and $n$, $m + n =
n + m$. 

*Proof.* By induction on $n$. The base case is easy using the second
proposition above. In the inductive step, we have
\begin{align*}
m + \suc(n) & = \suc(m + n) \\
& = \suc (n + m) \\
& = \suc(n) + m
\end{align*}
using the third proposition above.

#+HTML: <hr>
#+LATEX: \horizontalrule

** Induction and Recursion in Lean

Internally, in Lean, the natural numbers are defined as a type
generated inductively from an axiomatically declared =zero= and =succ=
operation:
#+BEGIN_SRC lean
namespace hide

-- BEGIN
inductive nat : Type :=
| zero : nat
| succ : nat → nat
-- END
end hide
#+END_SRC
If you click the button that copies this text into the editor in the
online version of this textbook, you will see that we wrap it with the
phrases =namespace hide= and =end hide=. This puts the definition into
a new "namespace," so that the identifiers that are defined are
=hide.nat=, =hide.nat.zero= and =hide.nat.succ=, to avoid conflicting
with the one that is in the Lean library. Below, we will do that in a
number of places where our examples duplicate objects defined in the
library. The unicode symbol =ℕ=, entered with =\N= or =\nat=, is a
synonym for =nat=.

Declaring =nat= as an inductively defined type means that we can
define functions by recursion, and prove theorems by induction. For
example, these are the first two recursive definitions presented in
the last chapter:
#+BEGIN_SRC lean
open nat

definition two_pow : ℕ → ℕ
| 0        := 1 
| (succ n) := 2 * two_pow n

definition fact : ℕ → ℕ 
| 0        := 1
| (succ n) := (succ n) * fact n
#+END_SRC
Addition and numerals are defined in such a way that Lean recognizes
=succ n= and =n + 1= as essentially the same, so we could instead
write these definitions as follows:
#+BEGIN_SRC lean
open nat

-- BEGIN
definition two_pow : ℕ → ℕ
| 0       := 1 
| (n + 1) := 2 * two_pow n

definition fact : ℕ → ℕ 
| 0       := 1
| (n + 1) := (n + 1) * fact n
-- END
#+END_SRC
If we wanted to define the function =m^n=, we would do that by fixing
=m=, and writing doing the recursion on the second argument:
#+BEGIN_SRC lean
open nat

-- BEGIN
definition pow : ℕ → ℕ → ℕ 
| m 0        := 1
| m (n + 1)  := m * pow m n
-- END
#+END_SRC
Lean is also smart enough to interpret more complicated forms of
recursion, like this one:
#+BEGIN_SRC lean
definition fib : ℕ → ℕ
| 0        := 0
| 1        := 1
| (n + 2)  := fib (n + 1) + fib n
#+END_SRC

In addition to defining functions by recursion, we can prove theorems
by induction. In Lean, each clause of a recursive definition results
in a new identity. For example, the two clauses in the definition of
=pow= above give rise to the following two theorems:
#+BEGIN_SRC lean
open nat

namespace hide

definition pow : ℕ → ℕ → ℕ 
| m 0        := 1
| m (n + 1)  := m * pow m n

-- BEGIN
proposition pow_zero (n : ℕ) : pow n 0 = 1 := rfl
proposition pow_succ (m n : ℕ) : pow m (succ n) = m * pow m n := rfl
-- END

end hide
#+END_SRC

Notice that we could alternatively have used =(pow m n) * m= in the
second clause of the definition of =pow=. Of course, we can prove that
the two definitions are equivalent using the commutativity of
multiplication, but, using a proof by induction, we can also prove it
using only the associativity of multiplication, and the properties
~1 * m = m~ and ~m * 1 = m~. This is useful, because the power
function is also often used in situations where multiplication is not
commutative, such as with matrix multiplication. The theorem can be
proved in Lean as follows:
#+BEGIN_SRC lean
import data.nat 
open nat

namespace hide

definition pow : ℕ → ℕ → ℕ 
| m 0        := 1
| m (n + 1)  := m * (pow m n)

proposition pow_zero (n : ℕ) : pow n 0 = 1 := rfl
proposition pow_succ (m n : ℕ) : pow m (succ n) = m * (pow m n) := rfl

-- BEGIN
theorem pow_succ' (m n : ℕ) : pow m (succ n) = (pow m n) * m :=
nat.induction_on n
  (show pow m (succ 0) = pow m 0 * m, from calc
    pow m (succ 0) = m * pow m 0 : pow_succ
               ... = m * 1       : pow_zero
               ... = m           : mul_one
               ... = 1 * m       : one_mul
               ... = pow m 0 * m : pow_zero)
  (take n,
    assume ih : pow m (succ n) = pow m n * m,
    show pow m (succ (succ n)) = pow m (succ n) * m, from calc
      pow m (succ (succ n)) = m * (pow m (succ n)) : pow_succ
                        ... = m * (pow m n * m)    : ih
                        ... = (m * pow m n) * m    : mul.assoc
                        ... = pow m (succ n) * m   : pow_succ)
-- END
end hide
#+END_SRC
This is a typical proof by induction in Lean. It begins with the
phrase =nat.induction_on n=, and is followed by the base case and the
inductive hypothesis. The proof can be shortened with a clever use of
=rewrite=:
#+BEGIN_SRC lean
import data.nat 
open nat

namespace hide

definition pow : ℕ → ℕ → ℕ 
| m 0        := 1
| m (n + 1)  := m * (pow m n)

proposition pow_zero (n : ℕ) : pow n 0 = 1 := rfl
proposition pow_succ (m n : ℕ) : pow m (succ n) = m * (pow m n) := rfl

-- BEGIN
theorem pow_succ' (m n : ℕ) : pow m (succ n) = (pow m n) * m :=
nat.induction_on n
  (show pow m (succ 0) = pow m 0 * m, 
    by rewrite [pow_succ, pow_zero, mul_one, one_mul])
  (take n,
    assume ih : pow m (succ n) = pow m n * m,
    show pow m (succ (succ n)) = pow m (succ n) * m, 
      by rewrite [pow_succ, ih at {1}, -mul.assoc])
-- END
end hide
#+END_SRC
Remember that you can write a =rewrite= proof incrementally, checking
the error messages to make sure things are working so far, and to see
how far Lean got. The phrase =ih at {1}= tells Lean to apply the
inductive hypothesis only at the first place where it matches, and the
phrase =-mul.assoc= tells Lean to apply the associativity equation in
the backward direction.

In any case, the power function is already defined in the Lean library
as =pow_nat=. (It is defined generically for any type that has a
multiplication; the =nat= in =pow_nat= refers to the fact that the
exponent is a natural number.) The definition is essentially the one
above, and the theorems above are also there:
#+BEGIN_SRC lean
import data.nat 
open nat

check @pow_nat
check @pow_zero
check @pow_succ
check @pow_succ'
#+END_SRC
The library also allows us to use the usual notation:
#+BEGIN_SRC lean
import data.nat
open nat

-- BEGIN
variables m n : ℕ

check m^n
-- END
#+END_SRC

As another example of a proof by induction, here is a proof of the
identity =m^(n + k) = m^n * m^k=.
#+BEGIN_SRC lean
import data.nat 
open nat

namespace hide

-- BEGIN
theorem pow_add (m n k : ℕ) : m^(n + k) = m^n * m^k :=
nat.induction_on k
  (show m^(n + 0) = m^n * m^0, from calc
    m^(n + 0) = m^n       : add_zero
          ... = m^n * 1   : mul_one
          ... = m^n * m^0 : pow_zero)
  (take k,
    assume ih : m^(n + k) = m^n * m^k,
    show m^(n + succ k) = m^n * m^(succ k), from calc
      m^(n + succ k) = m^(succ (n + k)) : add_succ
                 ... = m^(n + k) * m    : pow_succ'
                 ... = m^n * m^k * m    : ih
                 ... = m^n * (m^k * m)  : mul.assoc
                 ... = m^n * m^(succ k) : pow_succ')
-- END
end hide
#+END_SRC
Notice the same pattern. This time, we do induction on =k=, and the
base case and inductive step are routine. Once again, with a bit of
cleverness, we can shorten the proof with =rewrite=:
#+BEGIN_SRC lean
import data.nat 
open nat

namespace hide

-- BEGIN
theorem pow_add (m n k : ℕ) : m^(n + k) = m^n * m^k :=
nat.induction_on k
  (show m^(n + 0) = m^n * m^0, 
    by rewrite [add_zero, pow_zero, mul_one]) 
  (take k,
    assume ih : m^(n + k) = m^n * m^k,
    show m^(n + succ k) = m^n * m^(succ k),
     by rewrite [add_succ, pow_succ', ih, mul.assoc, pow_succ'])
-- END
end hide
#+END_SRC
You should not hesitate to use =calc=, however, to make the proofs
more explicit. Remember that you can also use =calc= and =rewrite=
together, using =calc= to structure the calculational proof, and using
=rewrite= to fill in each justification step.

** Defining the Arithmetic Operations in Lean

In fact, addition and multiplication are defined in Lean essentially
as described in [[#Defining_the_Arithmetic_Operations_Axiomatically][Section 18.1]]. The defining equations for addition hold
by reflexivity, but they are also named =add_zero= and =add_succ=:
#+BEGIN_SRC lean
import data.nat 
open nat

variables m n : ℕ

example : m + 0 = m := add_zero m
example : m + succ n = succ (m + n) := add_succ m n
#+END_SRC
Similarly, we have the defining equations for the predecessor function
and multiplication:
#+BEGIN_SRC lean
import data.nat 
open nat

check @pred_zero
check @pred_succ
check @mul_zero
check @mul_succ
#+END_SRC

Here are the five propositions proved in [[#Defining_the_Arithmetic_Operations_Axiomatically][Section 18.1]].
#+BEGIN_SRC lean
import data.nat 
open nat

namespace hide

-- BEGIN
theorem succ_pred (n : ℕ) : n ≠ 0 → succ (pred n) = n :=
nat.induction_on n
  (assume H : 0 ≠ 0,
    show succ (pred 0) = 0, from absurd rfl H)
  (take n,
    assume ih,
    assume H : succ n ≠ 0,
    show succ (pred (succ n)) = succ n, 
      by rewrite pred_succ)

theorem zero_add (n : nat) : 0 + n = n :=
nat.induction_on n
  (show 0 + 0 = 0, from rfl)
  (take n,
    assume IH : 0 + n = n,
    show 0 + succ n = succ n, from
      calc
	0 + succ n = succ (0 + n) : rfl
	  ... = succ n : IH)

theorem succ_add (m n : nat) : succ m + n = succ (m + n) :=
nat.induction_on n
  (show succ m + 0 = succ (m + 0), from rfl)
  (take n,
    assume IH : succ m + n = succ (m + n),
    show succ m + succ n = succ (m + succ n), from
      calc
	succ m + succ n = succ (succ m + n) : rfl
	  ... = succ (succ (m + n)) : IH
	  ... = succ (m + succ n) : rfl)

theorem add_assoc (m n k : nat) : m + n + k = m + (n + k) :=
nat.induction_on k
  (show m + n + 0 = m + (n + 0), by rewrite *add_zero)
  (take k, 
    assume ih : m + n + k = m + (n + k),
    show m + n + succ k = m + (n + (succ k)), from calc
      m + n + succ k = succ (m + n + k)   : add_succ
                 ... = succ (m + (n + k)) : ih
                 ... = m + (n + succ k)   : by rewrite *add_succ)

theorem add_comm (m n : nat) : m + n = n + m :=
nat.induction_on n
  (show m + 0 = 0 + m, by rewrite [add_zero, zero_add])
  (take n,
    assume ih : m + n = n + m,
    show m + succ n = succ n + m, from calc
      m + succ n = succ (m + n) : add_succ
             ... = succ (n + m) : ih
             ... = succ n + m   : succ_add)

-- END
end hide
#+END_SRC

** Exercises

1. Give an informal but detailed proof that for every natural number
   $n$, $1 \cdot n = n$.

2. Prove the multiplication is associative and commutative, in the same way.

3. Prove that multiplication distributes over addition: for every
   natural numbers $m$, $n$, and $k$, $m (n + k) = m n + m k$.

4. Prove $(m^n)^k = m^{nk}$.

5. Formalize all these theorems in Lean.
