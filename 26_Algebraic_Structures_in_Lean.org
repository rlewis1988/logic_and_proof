Title: Logic and Proof
#+Author: [[http://www.andrew.cmu.edu/user/avigad][Jeremy Avigad]], [[http://www.andrew.cmu.edu/user/rlewis1/][Robert Y. Lewis]],  [[http://www.contrib.andrew.cmu.edu/~fpv/][Floris van Doorn]]

* Algebraic Structures in Lean
:PROPERTIES:
  :CUSTOM_ID: Algebra_in_Lean
:END:


Lean has an extensive library of algebraic structures and facts about them, and using this library is very simple.
We'll focus here on the example of groups, but feel free to experiment with others!

To begin with, we need to tell Lean that we are using algebraic reasoning by including the following at the top of
our file:
#+BEGIN_SRC lean
import algebra.group
open algebra
#+END_SRC

(If you are trying out different structures, you can write 'import algebra.ordered_field' as a catch-all.)

In informal mathematics, a group axiomatizes operations on an underlying set; in Lean, we will axiomatize operations
on an underlying /type/. We do that as follows:
#+BEGIN_SRC lean
import algebra.group
open algebra
--BEGIN
variables (G : Type) [group G]
--END
#+END_SRC

Amazingly, that's it: all of the group definitions and rules are now available in G!

#+BEGIN_SRC lean
import algebra.group
open algebra
variables {G : Type} [group G]
--BEGIN
-- In the following lines, we must tell Lean that 1 is an element of G.
-- Otherwise, Lean doesn't know which group we're thinking of!

check (1 : G)

check (1 : G) * (1 : G)

example : (1 : G) * (1 : G) = (1 : G) := mul_one 1

theorem one_is_unique : ∀ e : G, (∀ g : G, e * g = g ∧ g * e = g) → e = 1 :=
  take e,
  assume He : ∀ g : G, e * g = g ∧ g * e = g,
  have He' : ∀ g : G, e * g = g, from
    take g,
    have e * g = g ∧ g * e = g, from He g,
    show e * g = g, from and.left this,
  have He1 : e * 1 = 1, from He' 1,
  show e = 1, from calc
     e = e * 1 : mul_one
   ... = 1     : He1
--END
#+END_SRC

By assuming that $G$ is a group, we can access a huge library of definitions and theorems
and apply them to $G$. Furthermore, any new theorems we prove about $G$ will apply to all other groups.
We refer interested readers to the chapter of the Lean tutorial on algebraic reasoning for more information.
